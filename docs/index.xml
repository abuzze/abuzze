<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cheatsheets on Memoirs of a sysadmin</title><link>https://abuzze.github.io/abuzze/docs/</link><description>Recent content in Cheatsheets on Memoirs of a sysadmin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://abuzze.github.io/abuzze/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>AD Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/active-directory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/active-directory/</guid><description>Windows/Mac Active Directory Cheatsheet # Show Kerberos Tickets and create sessions for a user account
klist kinit user@domain.tld klist kdestroy Show AD Settings on a macbook
dsconfigad -show Troubleshoot Directory Service issues on a Macbook
dscl ls dsAttrTypeNative:userAccountControl: 512 change usabilitytest dsAttrTypeNative:userAccountControl 66080 512 Find all account computer accounts in the active directory
(Get-ADComputer -Filter * -Properties PasswordLastSet,LastLogonDate,OperatingSystem | ? { $_.LastLogonDate -GT $(Get-Date).AddDays(-180) } | Select Name,PasswordLastSet,LastLogonDate,Operatingsystem | ?</description></item><item><title>Arduino Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/cheat-sheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/cheat-sheet/</guid><description>Arduino # Arduino Nano # Settings for Arduino IDE # Tools &amp;gt; Board &amp;gt; Arduino Nano Tools &amp;gt; Processor &amp;gt; ATMEGA328P Old Bootloader Tools &amp;gt; Programmer &amp;gt; ArdinoISP Tools &amp;gt; Port &amp;gt; Select COMX (replug to check which port is new. It&amp;rsquo;s never COM1)
Simple Programs # Onboard LED Blink # int LED = 13; //13 for L LED or 30 for RX LED int DelayTime = 500; void setup() { pinMode(13, OUTPUT); } void loop() { digitalWrite(LED, HIGH); delay(DelayTime); digitalWrite(LED,LOW); delay(DelayTime); } Buttontester # // Blink the onboard LED, when a button is pressed const int LED = 13; // sets LED to pin 13 const int DelayTime = 500; const int buttonPin = 2; // the number of the pushbutton pin int buttonState = 0; void setup() { pinMode(LED, OUTPUT); pinMode(buttonPin, INPUT_PULLUP); //define INPUT_PULLUP to use the onboard resistor } void loop() { buttonState = digitalRead(buttonPin); if (buttonState == HIGH) { digitalWrite(LED,LOW); // LED ON } else{ digitalWrite(LED,HIGH); // LED OFF } } Simple Keyboard (Won&amp;rsquo;t work with Nano.</description></item><item><title>Cisco Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/cisco/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/cisco/</guid><description>Cisco Cheatsheet # Enable SSH login on a Catalyst 3850 # configure terminal hostname name ip domain-name name crypto key generate rsa ip ssh [time-out seconds | authentication-r etries integer ] ip ssh version 2 line vty 5 15 exec-timeout 15 0 transport input ssh access-class authorized-managers in ! ip access-list extended authorized-managers permit ip 172.25.0.0 0.0.255.255 any permit ip host 172.20.3.195 any permit ip host 172.20.1.133 any Check this when setting up new switches.</description></item><item><title>Docker Cheatcheet</title><link>https://abuzze.github.io/abuzze/docs/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/docker/</guid><description>Docker Cheatsheat # Cleanup # Diskspace and resources used
docker system df
The RECLAIMABLE column shows how much diskspace can be saved by deleting unused images
The size of an image
docker image ls
The content of a volume. This will show the mountpoint, which can be inspected with du.
docker volume ls
docker volume inspect 69915af8ddf99
Remove all containers and their volumes (works only if all containers are stopped)</description></item><item><title>Git Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/git/</guid><description>GITHUB CHEATSHEET # Creating a new local repo
git init git add . git commit -m &amp;quot;Initial commit&amp;quot; Show commit history
git log Reverting everything to the last committed state
git reset git checkout . Hard delete unpublished commits
# This will destroy any local modifications. # Don't do it if you have uncommitted work you want to keep. git reset --hard 0d1d7fc32 # or switch to the last commit git reset --hard HEAD Checking unstaged changes</description></item><item><title>Juniper Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/juniper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/juniper/</guid><description>Juniper Cheatsheet # Configuration # Run a command in configure mode
run ping 172.20.1.1 run show interface terse copy configuration via terminal # Delete the old config first
delete vlans delete interfaces delete system etc. Copy the complete config via ctrl+c
load merge terminal relative show | compare commit and-quit Display Infos # Show all interfaces status
show interface terse show interface description Show all configured options as set commands</description></item><item><title>K8S Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/k8s/</guid><description>K8S cheatsheet # Useful tools # Colorize the output of kubectl. Use kubecolor instead.
brew install dty1er/tap/kubecolor htop for k8s. Just run k9s
brew install derailed/k9s/k9s Faster context switching between clusters with kubectx
brew install kubectx Install # Install on bare metal (Ubuntu) # Used guide. Also a good source is this
$ sudo apt update $ sudo apt install docker.io apt-transport-https curl -y $ sudo systemctl start docker $ sudo systemctl enable docker $ curl -s https://packages.</description></item><item><title>Linux Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/linux/</guid><description>Basic Linux Cheatsheet # Commands are in random order; execute at your own risk # setup ansible in venv # easy_install pip pip install virtualenv virtualenvwrapper mkdir ~/venv/ansible_2_5_11 virtualenv ~/venv/ansible_2_5_11 source ~/venv/ansible_2_5_11/bin/activate pip install nose cryptography tornado pip install ansible==2.5.11 to deactivate the venv
deactivate Sendmail testen # echo &amp;ldquo;Subject: test&amp;rdquo; | /usr/lib/sendmail -v me@domain.com
fehlender Einf. key im Midnight Commander auf OSX
Ctrl + t markiert in mc einen einzelnen Eintrag Prozesse die mit D markiert sind finden, um Performanceprobleme zu finden</description></item><item><title>LXC Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/lxc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/lxc/</guid><description>LXC Config Cheatsheet # first lxd config
lxd init check the zpool
zpool list zpool status check zfs
zfs list show lxd config
lxc profile show default Public images
lxc image list images: Install and run an image
lxc launch images:alpine/3.8/i386 alpine-test Finding containers
$ lxc list --fast $ lxc list | grep RUNNING $ lxc list | grep STOPPED runnnig commands in containers</description></item><item><title>MacOS Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/macos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/macos/</guid><description>Bonjourbrowser # $ dns-sd -B _afpovertcp._tcp Browsing for _afpovertcp._tcp DATE: ---Thu 16 Jun 2016--- 9:44:33.789 ...STARTING... Timestamp A/R Flags if Domain Service Type Instance Name 9:44:33.790 Add 2 9 local. _afpovertcp._tcp. netsus-server speed up cifs/smb # sudo sysctl -w net.inet.tcp.delayed_ack=0 persist it in /etc/sysctl.conf
Launchd # alle Einträge anzeigen
launchctl list netzwerkverkehr sniffen # alles auf der Netzwerkkarte
sudo tcpdump -n -i en0 DNS Cache löschen # Mac OS X Lion, Mountain Lion (10.</description></item><item><title>MongoDB Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/mongodb/</guid><description>MongoDB Cheatsheet # You can find a full list of all Command in the Manual
open the mongoshell
mongo show all database and their size
show dbs; switch to a database
use permissions_production; show all collections
show collections; show all datasets in a collection and format the human readable
db.rentals.find().pretty() count all datasets, without showing them
db.rentals.find().count() Search for a specific value
db.users.find({&amp;quot;name&amp;quot;: /.</description></item><item><title>Python Cheatsheet</title><link>https://abuzze.github.io/abuzze/docs/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/python/</guid><description>Python cheatsheet # shebang for pythonscripts # #!/usr/bin/env python
variable type # strings # concatinate strings like a pro
foobar = ''.join(['foo', 'bar']) dictionary # test = {'name':'John','job':'teacher'} print test['job'] # prints teacher print test.key() #prints ['name','job'] print test.values() #prints ['John','teacher'] print test.items() #prints [('name','teacher'),('nextkey','nextvalue')] for key in test: print key,test[key] #prints name John \n job teacher lists # zoo_animals = [&amp;quot;pangolin&amp;quot;, &amp;quot;cassowary&amp;quot;, &amp;quot;sloth&amp;quot;] zoo_animals.</description></item><item><title>Ruby Setup on a Macbook</title><link>https://abuzze.github.io/abuzze/docs/ruby-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abuzze.github.io/abuzze/docs/ruby-setup/</guid><description>Ruby Setup # First install rbenv and ruby-build to have different ruby versions. Could have used rvm, but it looks a little bit like rotten foot.
$ brew update $ brew install rbenv ruby-build $ echo &amp;#39;eval &amp;#34;$(rbenv init -)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc list all available versions: # $ rbenv install -l install a Ruby version: # $ rbenv install 2.0.0-p247 switch to a specific ruby version only for the current session # $ rbenv local 1.</description></item></channel></rss>